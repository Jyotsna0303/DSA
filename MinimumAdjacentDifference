import java.io.*;
import java.util.*;
import java.lang.*;

/* Input:
n = 7
Arr[] = {8,-8,9,-9,10,-11,12}
Output: 4
Explanation: The absolute difference 
between adjacent elements in the given 
array are as such: 16 17 18  19 21 23 4
(first and last). Among the calculated 
absolute difference the minimum is 4.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(1).*/
 // } Driver Code Ends

class Solution{
    
    //Function to find minimum adjacent difference in a circular array.
    // arr[]: input array
    // n: size of array
    public static int minAdjDiff(int arr[], int n) {
        
        // Your code here
        int minValue=Math.abs(arr[0]-arr[1]);
      
        int temp;
        for(int i=0;i+1<n;i++){
            temp=Math.abs(arr[i]-arr[i+1]);
            if (temp<minValue){
               
                
                minValue=temp;
               
            }
        }
        if (Math.abs(arr[n-1]-arr[0])<minValue){
            minValue=Math.abs(arr[n-1]-arr[0]);
        }
        return minValue;
        
    }
}


// { Driver Code Starts.


class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		
		while(t-->0)//While testcases exist
		{
		    //Input size of array
		    int n = Integer.parseInt(br.readLine().trim());
		    
		    //Array of size n
		    int arr[] = new int[n];
		    
		    String inputLine[] = br.readLine().trim().split(" ");
		    
		    //input elements of array
		    for(int i=0; i<n; i++){
		        arr[i]=Integer.parseInt(inputLine[i]);
		    }
		    
		    Solution obj = new Solution();
		    
		    System.out.println(obj.minAdjDiff(arr, n));
		}
	}
}
  // } Driver Code Ends
