/*to choose the safe place in the circle so that when you perform these operations starting from 1st place in the circle,
you are the last one remaining and survive.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= k, n <= 20*/
/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class Recursion {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int T=sc.nextInt();//testcases
		while(T-->0)
		{
		    Solution obj=new Solution();
		    
		    int n,k;
		    //taking input n and k
		    n=sc.nextInt();
		    k=sc.nextInt();
		    
		    //calling josephus() function
		    System.out.println(obj.josephus(n,k));
		    
		    
		}
		
	}
}

// } Driver Code Ends



class Solution
{
   public int josephus(int n, int k)
    {
        //Your code here
        if (n==1){
            return 1;
        }
        return ((josephus(n-1,k)+k-1) %n+1 );
    }

}

