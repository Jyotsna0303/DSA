//. You need to find the digital root of n. DigitalRoot of a number is the recursive sum of its digits until we get a single digit number.
/* Input:
n = 99999
Output: 9
Explanation: Sum of digits of 99999 is 45
which is not a single digit number, hence
sum of digit of 45 is 9 which is a single
digit number.
Expected Time Complexity: O((Num of Digits)2).
Expected Auxiliary Space: O(Num of Digits).

Constraints:
1 <= n <= 10^7*/
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driverclass
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        
        int t = sc.nextInt();//taking total testcases
        
        while(t-- > 0)
        {
            int n = sc.nextInt();//taking number n
            
            //calling digitalRoot() function of 
            //class Digital
            System.out.println(new Solution().digitalRoot(n));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution
{
    // complete the function
    public static int digitalRoot(int n)
    {
        // add your code here
        if (n<10){
            return n;
        }
        int sum=sumOfDigits(n);
        if (sum<10){
          return sum;
        }
      
       return digitalRoot(sum);
    }

    public static int sumOfDigits(int n){
        if (n==0){
            return 0;
        }
        return (n%10+sumOfDigits(n/10));
    }
}


