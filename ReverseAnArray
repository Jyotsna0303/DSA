//Reverese an array of integers
import java.util.stream.IntStream;

public class ReverseAnArray {

    public static void main(String []args) {
        int[] arr = {1, 2, 3, 4 ,5};
        int [] arr1=reverseUsingStream(arr);
        System.out.print("Reverse:");
        for (int i : arr1) {
            System.out.println(i);
        }
    }    //time complexity O(n)
        public static int[] reverse(int [] arr){
            int n=arr.length;
            for (int i=0;i<n/2;i++ ){
                int temp= arr[i];
                arr[i]=arr[n-1-i];
                arr[n-1-i]=temp;
            }
            return arr;
        }
        // we need to pass 0 as n from main Time complexity O(n)
         public static void recursiveReverse(int [] arr, int n){
        if (n>=arr.length/2){
            return;
        }
        int temp=arr[n];
        arr[n]=arr[arr.length-1-n];
        arr[arr.length-1-n]=temp;
        recursiveReverse(arr,n+1);
    }
     // we can use Collections.reverse(List)-- this takes O(n) time
     // We can use Collections.swap(list,i,j)--O(1)

    //Java 8 way time com-= O(n) internally traversal of array
    public static int [] reverseUsingStream(int[] array){
        return IntStream.range(0,array.length)
                .map(i ->array[array.length-1-i])
                .toArray();
    }
}
