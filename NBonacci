
//N-bonacci number. Print first M N-bonacci number.
// I/P: N=3, M=8 O/P ( 0 ,0,1, 1, 2, 4, 7, 13) ( it is similar to fibonacci where N=2) 
public class NBonacci {
    public static void main(String [] args) {
        int N = 3, M = 9;
        int[] arr = new int[9];
        windowNBonacci(N,M,arr);
        for (int i : arr) {
            System.out.println(i);
        }
    }
    //O(N*M)= time complexity
    public static void nBonacci(int N, int M, int[] arr){
        for(int i=0;i<N-1;i++){
            arr[i]=0;
        }
        arr[N-1]=1;
        for(int i=N;i<M;i++){
            int sum=0;
            for (int j=1;j<=N;j++){
                sum+=arr[i-j];
            }
            arr[i]=sum;
        }
    }

    //window sliding time complexity=O(M)
    public static void  windowNBonacci(int N, int M, int arr[]){
        for(int i=0;i<N-1;i++){
            arr[i]=0;
        }
        arr[N-1]=1;
        arr[N]=1;
        for (int i=N+1;i<M;i++){
            arr[i]=(2*arr[i-1])-arr[i-N-1];
        }
        }
}
