//Given a quadratic equation in the form ax2 + bx + c. Find its roots.
//You don't need to read input or print anything. Your task is to complete the function quadraticRoots() which takes a, b, c as input parameters and returns a list of two integers containing the floor value of its roots in decreasing order. If roots are imaginary, the returning list should contain only 1 integer ie -1. 
//Note: If roots are imaginary, the generated output will display "Imaginary".

//Expected Time Complexity: O(1)
//Expected Auxiliary Space : O(1)

// Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int a, b, c;
            a = sc.nextInt();
            b = sc.nextInt();
            c = sc.nextInt();
            Solution obj = new Solution();
            ArrayList<Integer> ans = obj.quadraticRoots(a, b, c);
            if (ans.size() == 1 && ans.get(0) == -1)
                System.out.print("Imaginary");
            else
                for (Integer val : ans) System.out.print(val + " ");
            System.out.println();
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solution {
    public ArrayList<Integer> quadraticRoots(int a, int b, int c) {
        // code here
        ArrayList <Integer> l = new ArrayList<Integer>();
        int d=(int) (b*b)-(4*a*c);
        if (d<0){
            l.add(-1);
        }
        else{
        l.add((int)Math.floor((-b+Math.sqrt(d))/(2*a)));
        l.add((int)Math.floor((-b-Math.sqrt(d))/(2*a)));
         }
        Collections.sort(l, Collections.reverseOrder());
        return l;
    }
}

 

 

 
