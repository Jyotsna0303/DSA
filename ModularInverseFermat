// Find the modular inverse using Fermat little theorem
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class Main {
	public static void main (String[] args) {
	    
	    //taking input using Scanner class
		Scanner sc=new Scanner(System.in);
		
		//taking testcases
		int T=sc.nextInt();
		
		while(T-->0)
		{
		    Solution  obj=new Solution ();
		    int a,m;
		    
		      
            //taking input a and m
		    a=sc.nextInt();
		    m=sc.nextInt();
		    
		    
		  
            //calling function modInverse()
		    System.out.println(obj.modInverse(a,m));
		   
		    
		}
		
	}
}

// } Driver Code Ends


//User function Template for Java


class Solution
{
    //conditoins that m should be prime and a & m should be co-prime
  public int modInverse(int a, int m)
    {
      //Your code here
      if (isPrime(m)){
          int gcd=0;
         if (a>=m){
            gcd=euclideanAlgo(a,m);
        }
          else {
              gcd=euclideanAlgo(m,a);
          }
        if (gcd==1){
            return ((int)Math.pow(a,(m-2)))%m;  //Fermat's little theorem. 
        }
        else return -1;
      }
      else
        return -1;
    }
    public boolean isPrime(int m){
            if (m==0 || m==1){
                return false;
            }
          for (int i=2;i*i<=m; i++){
            if (m%i==0){
                return false;
            }
        }
        return true;
    }
    public int euclideanAlgo(int a, int b){
        //assuming a>=b
        
        if (b==0){
            return a;
        }
        return 1*euclideanAlgo(b,a%b);
    }
}
